
AWSTemplateFormatVersion: 2010-09-09

Description: Serverless Applications VPC

Parameters:
  VpcCidr:
    Description: "Enter the IP range (CIDR notation) for this VPC"
    Type: String
    Default: "10.100.0.0/16"
  PublicSubnet1Cidr:
    Description: "Enter the IP range (CIDR notation) for public subnet 1"
    Type: String
    Default: "10.100.10.0/24"
  PublicSubnet2Cidr:
    Description: "Enter the IP range (CIDR notation) for public subnet 2"
    Type: String
    Default: "10.100.11.0/24"
  PrivateSubnet1Cidr:
    Description: "Enter the IP range (CIDR notation) for private subnet 1"
    Type: String
    Default: "10.100.20.0/24"
  PrivateSubnet2Cidr:
    Description: "Enter the IP range (CIDR notation) for private subnet 2"
    Type: String
    Default: "10.100.21.0/24"

Resources:

  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName} VPC"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName} Internet Gateway"

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet1Cidr
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName} Public Subnet 1"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select [ 1, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet2Cidr
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName} Public Subnet 2"

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select [ 0, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet1Cidr
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName} Private Subnet 1"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select [ 1, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet2Cidr
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName} Private Subnet 2"

  NatGateway1ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName} NAT Gateway 1 Elastic IP"

  NatGateway2ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName} NAT Gateway 2 Elastic IP"

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1ElasticIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName} NAT Gateway 1"

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2ElasticIP.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName} NAT Gateway 2"

  PublicRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName} Public Route Table 1"

  PublicRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName} Public Route Table 2"

  PublicRouteTable1InternetGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicRouteTable2InternetGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable2
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName} Private Route Table 1"

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName} Private Route Table 2"

  PrivateRouteTable1NATGateway1Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateRouteTable2NATGateway2Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupDescription: "Security group with no ingress rule"
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName} No Ingress Security Group"

  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupDescription: "Security group with 80/443 ingress rules"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName} Web Security Group

  VPNSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupDescription: "Security group with no ingress rule"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 50.222.21.154/32
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 184.74.241.146/32
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName} No Ingress Security Group"

  S3Endpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      RouteTableIds:
      - !Ref PrivateRouteTable1
      - !Ref PrivateRouteTable2
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      VpcEndpointType: Gateway
      VpcId: !Ref Vpc

  DynamoDBEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      RouteTableIds:
        - !Ref PrivateRouteTable1
        - !Ref PrivateRouteTable2
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.dynamodb"
      VpcEndpointType: Gateway
      VpcId: !Ref Vpc

  ApiGatewayEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      PrivateDnsEnabled: true
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.execute-api"
      SubnetIds:
      - !Ref PrivateSubnet1
      - !Ref PrivateSubnet2
      VpcEndpointType: Interface
      VpcId: !Ref Vpc

  GlueEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      PrivateDnsEnabled: true
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.glue"
      SubnetIds:
      - !Ref PrivateSubnet1
      - !Ref PrivateSubnet2
      VpcEndpointType: Interface
      VpcId: !Ref Vpc


Outputs:

  VpcId:
    Description: A reference to the created VPC ID
    Value: !Ref Vpc
    Export:
      Name: !Sub "${AWS::StackName}-VpcId"

  VpcArn:
    Description: A reference to the created VPC ARN
    Value: !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:vpc/${Vpc}"
    Export:
      Name: !Sub "${AWS::StackName}-VpcArn"

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet1"

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet2"

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet1"

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet2"

  NatGateway1ElasticIP:
    Description: The static ip for NATGateway1
    Value: !Ref NatGateway1ElasticIP
    Export:
      Name: !Sub "${AWS::StackName}-NatGateway1ElasticIP"

  NatGateway2ElasticIP:
    Description: The static ip for NATGateway2
    Value: !Ref NatGateway2ElasticIP
    Export:
      Name: !Sub "${AWS::StackName}-NatGateway2ElasticIP"

  NoIngressSecurityGroupId:
    Description: Security group with no ingress rule
    Value: !Ref NoIngressSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-NoIngressSecurityGroupId"

  NoIngressSecurityGroupArn:
    Description: Security group with no ingress rule
    Value: !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/${NoIngressSecurityGroup}"
    Export:
      Name: !Sub "${AWS::StackName}-NoIngressSecurityGroupArn"

  VPNSecurityGroupId:
    Description: Security group with ingress rules for vpn
    Value: !Ref VPNSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-VPNSecurityGroupId"

  VPNSecurityGroupArn:
    Description: Security group with ingress rules for vpn
    Value: !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/${VPNSecurityGroup}"
    Export:
      Name: !Sub "${AWS::StackName}-VPNSecurityGroupArn"

  ELBSecurityGroupId:
    Description: Security group with 80/443 ingress rules
    Value: !Ref ELBSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-ELBSecurityGroupId"

  ELBSecurityGroupArn:
    Description: Security group with 80/443 ingress rules
    Value: !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/${ELBSecurityGroup}"
    Export:
      Name: !Sub "${AWS::StackName}-ELBSecurityGroupArn"
